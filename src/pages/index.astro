---
import DefaultLayout from "../layouts/Default.astro";
import { getCollection } from "astro:content";

import { HeaderSection } from "../sections/Header.tsx";
import { HeroSection } from "../sections/Hero.tsx";
import { FeaturesCardsSection } from "../sections/FeaturesCards.tsx";
import { FeaturesGrid } from "../sections/FeaturesGrid.tsx";
import { LatestPosts } from "../sections/LatestPosts.tsx";
import { TestimonialsSection } from "../sections/TestimonialsSection.tsx";
import { CallToAction } from "../sections/CallToAction.tsx";
import { Footer } from "../sections/Footer.tsx";

const posts = await getCollection("blog");

const latestPosts = posts
  .sort((a, b) => {
    if (a.data.pubDate.valueOf() === b.data.pubDate.valueOf()) return 0;
    return a.data.pubDate.valueOf() > b.data.pubDate.valueOf() ? -1 : 1;
  })
  .slice(0, 4);
---

<DefaultLayout>
  <HeaderSection />
  <HeroSection client:load />
  <FeaturesCardsSection />
  <FeaturesGrid />
  <LatestPosts latestPosts={latestPosts} />
  <TestimonialsSection />
  <CallToAction />
  <Footer />
</DefaultLayout>

<!-- the way that astro works is that it is a server side framework or atleast by default it is, which means all the react components that we defined above get statically rendered but they don't come with any javascript unless we tell it to also load on the client, in our case we want the hero section to Load on the client side we need to add a directive as we have above which ensures that the javascript loads on the client and that any interactivity can work on the client side -->